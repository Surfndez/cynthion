#![cfg_attr(feature = "nightly", feature(error_in_core))]
#![cfg_attr(feature = "nightly", feature(panic_info_message))]
#![cfg_attr(not(test), no_std)]

//! Simple peripheral-level USB stack

pub mod class;
pub mod control;
pub mod control_deprecated;
pub mod descriptor;
pub mod device;
pub mod error;
pub mod setup;
pub mod traits;

pub use error::SmolError;
pub use error::SmolResult;

// TODO const template structs
pub const EP_MAX_ENDPOINTS: usize = 16;
pub const EP_MAX_PACKET_SIZE: usize = 512;

pub mod event {
    #[cfg(feature="chonky_events")]
    use crate::setup::SetupPacket;

    /// Interface events generated by the USB interface's interrupt handler.
    #[derive(Copy, Clone)]
    #[repr(u8)]
    pub enum UsbEvent {
        /// Received a USB bus reset
        BusReset = 10,

        /// Received a setup packet on USBx_EP_CONTROL
        ///
        /// Contents is (endpoint_number)
        ReceiveControl(u8) = 11,

        #[cfg(feature="chonky_events")]
        /// Received a setup packet on USBx_EP_CONTROL
        ///
        /// An alternate version of `ReceiveControl` that can be used
        /// when the setup packet is read inside the interrupt handler
        /// for lower latency.
        ///
        /// Contents is (endpoint_number, setup_packet)
        ReceiveSetupPacket(u8, SetupPacket) = 14, // TODO fix this

        /// Received a data packet on USBx_EP_OUT
        ///
        /// Contents is (endpoint_number)
        ReceivePacket(u8) = 12,

        #[cfg(feature="chonky_events")]
        /// Received a data packet on USBx_EP_OUT
        ///
        /// An alternate version of `ReceivePacket` that can be used
        /// when the packet is read inside the interrupt handler
        /// for lower latency.
        ///
        /// Contents is (endpoint_number, bytes_read, packet_buffer)
        ReceiveBuffer(u8, usize, [u8; crate::EP_MAX_PACKET_SIZE]) = 15, // TODO fix this

        /// Send is complete on USBx_EP_IN
        ///
        /// Contents is (endpoint_number)
        SendComplete(u8) = 13,
    }

    impl core::fmt::Debug for UsbEvent {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            match self {
                UsbEvent::BusReset => {
                    write!(f, "BusReset")
                }
                UsbEvent::ReceiveControl(endpoint) => {
                    write!(f, "ReceiveControl({})", endpoint)
                }
                #[cfg(feature="chonky_events")]
                UsbEvent::ReceiveSetupPacket(endpoint, setup_packet) => {
                    write!(f, "ReceiveSetupPacket({}, {:?})", endpoint, setup_packet)
                }
                UsbEvent::ReceivePacket(endpoint) => {
                    write!(f, "ReceivePacket({})", endpoint)
                }
                #[cfg(feature="chonky_events")]
                UsbEvent::ReceiveBuffer(endpoint, bytes_read, _buffer) => {
                    write!(f, "ReceiveBuffer({}, {})", endpoint, bytes_read)
                }
                UsbEvent::SendComplete(endpoint) => {
                    write!(f, "SendComplete({})", endpoint)
                }
            }
        }
    }

    impl From<UsbEvent> for u8 {
        fn from(event: UsbEvent) -> u8 {
            match event {
                UsbEvent::BusReset => 10,
                UsbEvent::ReceiveControl(_) => 11,
                #[cfg(feature="chonky_events")]
                UsbEvent::ReceiveSetupPacket(_, _) => 14,
                UsbEvent::ReceivePacket(_) => 12,
                #[cfg(feature="chonky_events")]
                UsbEvent::ReceiveBuffer(_, _, _) => 15,
                UsbEvent::SendComplete(_) => 13,
            }
        }
    }
}
